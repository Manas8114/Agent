version: '3.8'

services:
  # Enhanced Telecom AI API
  api:
    build: .
    container_name: telecom-ai-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:///app/data/telecom_ai.db
      - REDIS_URL=redis://redis:6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - redis
      - mlflow
    networks:
      - telecom-ai-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Dashboard
  dashboard:
    build:
      context: ./dashboard/frontend
      dockerfile: Dockerfile
    container_name: telecom-ai-dashboard
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_WS_URL=http://localhost:8000
    depends_on:
      - api
    networks:
      - telecom-ai-network
    restart: unless-stopped

  # Redis for caching and message queuing
  redis:
    image: redis:7-alpine
    container_name: telecom-ai-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - telecom-ai-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # MLflow for experiment tracking
  mlflow:
    image: python:3.11-slim
    container_name: telecom-ai-mlflow
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow/mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow_data:/mlflow
    networks:
      - telecom-ai-network
    restart: unless-stopped
    command: >
      sh -c "pip install mlflow==2.8.1 &&
             mlflow server --backend-store-uri sqlite:///mlflow/mlflow.db
             --default-artifact-root /mlflow/artifacts
             --host 0.0.0.0 --port 5000"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: telecom-ai-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - telecom-ai-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: telecom-ai-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - telecom-ai-network
    restart: unless-stopped

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: telecom-ai-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - dashboard
    networks:
      - telecom-ai-network
    restart: unless-stopped

  # Data generator service
  data-generator:
    build: .
    container_name: telecom-ai-data-generator
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=sqlite:///app/data/telecom_ai.db
    volumes:
      - ./data:/app/data
    depends_on:
      - api
    networks:
      - telecom-ai-network
    restart: "no"
    command: >
      sh -c "python -c '
      from enhanced_telecom_ai.data.sample_data_generator import SampleDataGenerator;
      from enhanced_telecom_ai.data.data_manager import DataManager;
      import time;
      
      generator = SampleDataGenerator();
      data_manager = DataManager();
      
      print(\"Generating sample datasets...\");
      datasets = generator.generate_all_datasets();
      
      for data_type, filepath in datasets.items():
          print(f\"Ingesting {data_type} data...\");
          import pandas as pd;
          data = pd.read_csv(filepath);
          data_manager.ingest_data(data, data_type);
      
      print(\"Sample data generation completed\");
      '"

volumes:
  redis_data:
  mlflow_data:
  prometheus_data:
  grafana_data:

networks:
  telecom-ai-network:
    driver: bridge
