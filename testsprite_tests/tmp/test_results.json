[
  {
    "projectId": "ed0a4a7e-0b9e-49cd-855e-7b47411d66a6",
    "testId": "be45bb65-33aa-4531-b9a3-32590680adbe",
    "userId": "e40844a8-c011-70b8-b84a-d40497cb6991",
    "title": "TC001-create network intent for ibn",
    "description": "Test the POST /api/v1/telecom/intent endpoint to verify that a high-level network intent can be created successfully. Validate that the intent is translated into actionable policies, the response contains the intent_id, status, and enforcement logs, and no violations occur under defined constraints.",
    "code": "import requests\nimport uuid\nimport time\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\nHEADERS = {\"Content-Type\": \"application/json\"}\n\n\ndef test_create_network_intent_for_ibn():\n    url = f\"{BASE_URL}/api/v1/telecom/intent\"\n    # Construct a sample high-level network intent payload consistent with the PRD schema\n    payload = {\n        \"description\": \"Test intent for QoS optimization with no violations\",\n        \"intent_type\": \"qos-optimization\",\n        \"constraints\": {\n            \"max_latency_ms\": 50,\n            \"min_throughput_mbps\": 100,\n            \"no_security_violations\": True\n        },\n        \"priority\": 5\n    }\n\n    response = None\n    try:\n        response = requests.post(url, json=payload, headers=HEADERS, timeout=TIMEOUT)\n        response.raise_for_status()\n        data = response.json()\n\n        # Validate the presence of required fields in the response\n        assert \"intent_id\" in data and isinstance(data[\"intent_id\"], str) and data[\"intent_id\"]\n        assert \"status\" in data and isinstance(data[\"status\"], str) and data[\"status\"].lower() in {\"created\", \"enforced\", \"success\"}\n        assert \"enforcement_logs\" in data and isinstance(data[\"enforcement_logs\"], list)\n\n        # Validate that enforcement logs contain entries and no violations exist\n        enforcement_logs = data[\"enforcement_logs\"]\n        # Check logs are non-empty\n        assert len(enforcement_logs) > 0\n        # Check none of the logs contain violation indication (assuming violations are marked)\n        violation_keywords = [\"violation\", \"error\", \"fail\", \"alert\"]\n        violations_found = any(\n            any(keyword in str(log).lower() for keyword in violation_keywords) for log in enforcement_logs\n        )\n        assert not violations_found, \"Violations detected in enforcement logs\"\n\n    except requests.exceptions.RequestException as e:\n        assert False, f\"HTTP request failed: {e}\"\n    except ValueError:\n        assert False, \"Response is not a valid JSON\"\n    finally:\n        # Cleanup: If intent_id is created and an API to delete the intent existed,\n        # we would delete the intent here to keep test environment clean.\n        # However, PRD does not specify a delete endpoint, so skipping.\n        pass\n\n\ntest_create_network_intent_for_ibn()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 57, in <module>\n  File \"<string>\", line 44, in test_create_network_intent_for_ibn\nAssertionError: Violations detected in enforcement logs\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-04T11:34:01.147Z",
    "modified": "2025-10-04T11:34:26.966Z"
  },
  {
    "projectId": "ed0a4a7e-0b9e-49cd-855e-7b47411d66a6",
    "testId": "2180aab9-94e1-48d0-9780-9c486275abf4",
    "userId": "e40844a8-c011-70b8-b84a-d40497cb6991",
    "title": "TC002-get zero touch automation status",
    "description": "Test the GET /api/v1/telecom/zta-status endpoint to verify that the Zero-Touch Automation status is returned correctly. Validate the presence of status, active pipelines, and deployment metrics in the response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_get_zero_touch_automation_status():\n    url = f\"{BASE_URL}/api/v1/telecom/zta-status\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Validate presence of expected keys\n    assert isinstance(data, dict), \"Response JSON is not an object\"\n    assert \"status\" in data, \"'status' field missing in response\"\n    assert \"active_pipelines\" in data, \"'active_pipelines' field missing in response\"\n    assert \"deployment_metrics\" in data, \"'deployment_metrics' field missing in response\"\n\n    # Validate data types\n    assert isinstance(data[\"status\"], str), \"'status' must be a string\"\n    assert isinstance(data[\"active_pipelines\"], list), \"'active_pipelines' must be a list\"\n    assert isinstance(data[\"deployment_metrics\"], dict), \"'deployment_metrics' must be an object\"\n\ntest_get_zero_touch_automation_status()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-04T11:34:01.156Z",
    "modified": "2025-10-04T11:34:17.273Z"
  },
  {
    "projectId": "ed0a4a7e-0b9e-49cd-855e-7b47411d66a6",
    "testId": "6b0ca556-cddc-4d53-be6b-6676646c3faa",
    "userId": "e40844a8-c011-70b8-b84a-d40497cb6991",
    "title": "TC003-get quantum safe security status",
    "description": "Test the GET /api/v1/telecom/quantum-status endpoint to verify that the Quantum-Safe Security status is returned correctly. Validate the security level, supported algorithms, and threat detection information in the response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_get_quantum_safe_security_status():\n    url = f\"{BASE_URL}/api/v1/telecom/quantum-status\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Validate keys presence\n    expected_keys = {\"security_level\", \"algorithms\", \"threat_detection\"}\n    missing_keys = expected_keys - data.keys()\n    assert not missing_keys, f\"Response JSON missing keys: {missing_keys}\"\n\n    # Validate security_level type and non-empty string\n    security_level = data[\"security_level\"]\n    assert isinstance(security_level, str) and security_level.strip(), \"security_level must be a non-empty string\"\n\n    # Validate algorithms is a list (array)\n    algorithms = data[\"algorithms\"]\n    assert isinstance(algorithms, list), \"algorithms must be a list\"\n    # Optionally, each item in algorithms could be checked to be a string or dict, but schema is generic\n    for algo in algorithms:\n        assert algo is not None, \"Algorithm item must not be None\"\n\n    # Validate threat_detection is an object (dict)\n    threat_detection = data[\"threat_detection\"]\n    assert isinstance(threat_detection, dict), \"threat_detection must be an object/dict\"\n\ntest_get_quantum_safe_security_status()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-04T11:34:01.162Z",
    "modified": "2025-10-04T11:34:22.118Z"
  },
  {
    "projectId": "ed0a4a7e-0b9e-49cd-855e-7b47411d66a6",
    "testId": "f6222ee6-2ef1-4d70-bd0a-d21998a2cbbd",
    "userId": "e40844a8-c011-70b8-b84a-d40497cb6991",
    "title": "TC004-get global federation status",
    "description": "Test the GET /api/v1/telecom/federation endpoint to verify that the Global Federation status is returned correctly. Validate total nodes, active nodes, updates shared, aggregations total, and average model accuracy in the response.",
    "code": "import requests\n\ndef test_get_global_federation_status():\n    base_url = \"http://localhost:8000\"\n    url = f\"{base_url}/api/v1/telecom/federation\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=30)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        assert False, f\"HTTP request failed: {e}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    expected_fields = [\n        \"total_nodes\",\n        \"active_nodes\",\n        \"updates_shared\",\n        \"aggregations_total\",\n        \"avg_model_accuracy\"\n    ]\n\n    for field in expected_fields:\n        assert field in data, f\"Missing field in response: {field}\"\n\n    # Validate types\n    assert isinstance(data[\"total_nodes\"], int), \"total_nodes should be integer\"\n    assert isinstance(data[\"active_nodes\"], int), \"active_nodes should be integer\"\n    assert isinstance(data[\"updates_shared\"], int), \"updates_shared should be integer\"\n    assert isinstance(data[\"aggregations_total\"], int), \"aggregations_total should be integer\"\n    assert isinstance(data[\"avg_model_accuracy\"], (float, int)), \"avg_model_accuracy should be a number\"\n\n    # Validate that numeric values are non-negative (assuming that makes sense for these counts/metrics)\n    assert data[\"total_nodes\"] >= 0, \"total_nodes should be non-negative\"\n    assert data[\"active_nodes\"] >= 0, \"active_nodes should be non-negative\"\n    assert data[\"updates_shared\"] >= 0, \"updates_shared should be non-negative\"\n    assert data[\"aggregations_total\"] >= 0, \"aggregations_total should be non-negative\"\n    assert 0.0 <= data[\"avg_model_accuracy\"] <= 1.0, \"avg_model_accuracy should be between 0 and 1\"\n\ntest_get_global_federation_status()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-04T11:34:01.170Z",
    "modified": "2025-10-04T11:34:18.832Z"
  },
  {
    "projectId": "ed0a4a7e-0b9e-49cd-855e-7b47411d66a6",
    "testId": "5e19f97a-4196-4d37-b6f2-76160047090b",
    "userId": "e40844a8-c011-70b8-b84a-d40497cb6991",
    "title": "TC005-get self evolving agents status",
    "description": "Test the GET /api/v1/telecom/self-evolution endpoint to verify that the Self-Evolving Agents status is returned correctly. Validate agent id, evolution round, architecture improvement, performance improvement, and evolution status in the response.",
    "code": "import requests\n\ndef test_get_self_evolving_agents_status():\n    base_url = \"http://localhost:8000\"\n    url = f\"{base_url}/api/v1/telecom/self-evolution\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    timeout = 30\n    try:\n        response = requests.get(url, headers=headers, timeout=timeout)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    # Validate required fields presence and types\n    expected_fields = {\n        \"agent_id\": str,\n        \"evolution_round\": int,\n        \"architecture_improvement\": (int, float),\n        \"performance_improvement\": (int, float),\n        \"evolution_status\": str\n    }\n    for field, expected_type in expected_fields.items():\n        assert field in data, f\"Missing field '{field}' in response\"\n        assert isinstance(data[field], expected_type), f\"Field '{field}' expected type {expected_type}, got {type(data[field])}\"\n\n    # Additional non-empty validations\n    assert data[\"agent_id\"].strip() != \"\", \"agent_id should not be empty\"\n    assert data[\"evolution_round\"] >= 0, \"evolution_round should be non-negative\"\n    assert -1.0 <= data[\"architecture_improvement\"] <= 1.0, \"architecture_improvement should be between -1.0 and 1.0\"\n    assert -1.0 <= data[\"performance_improvement\"] <= 1.0, \"performance_improvement should be between -1.0 and 1.0\"\n    assert data[\"evolution_status\"].strip() != \"\", \"evolution_status should not be empty\"\n\ntest_get_self_evolving_agents_status()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-04T11:34:01.177Z",
    "modified": "2025-10-04T11:34:24.052Z"
  },
  {
    "projectId": "ed0a4a7e-0b9e-49cd-855e-7b47411d66a6",
    "testId": "9ff96d94-6b35-41cc-828b-5bc426a86c71",
    "userId": "e40844a8-c011-70b8-b84a-d40497cb6991",
    "title": "TC006-get qos anomaly detection results",
    "description": "Test the GET /api/v1/agents/qos-anomaly endpoint to verify that QoS anomaly detection results are returned correctly. Validate the anomalies array, confidence score, and timestamp in the response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\nHEADERS = {\n    \"Accept\": \"application/json\"\n}\n\ndef test_get_qos_anomaly_detection_results():\n    url = f\"{BASE_URL}/api/v1/agents/qos-anomaly\"\n    try:\n        response = requests.get(url, headers=HEADERS, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n    try:\n        data = response.json()\n    except ValueError:\n        assert False, \"Response is not valid JSON\"\n\n    assert isinstance(data, dict), \"Response JSON is not an object\"\n\n    # Validate presence and types of keys\n    assert \"anomalies\" in data, \"'anomalies' key missing in response\"\n    assert isinstance(data[\"anomalies\"], list), \"'anomalies' is not an array\"\n\n    assert \"confidence\" in data, \"'confidence' key missing in response\"\n    assert isinstance(data[\"confidence\"], (float, int)), \"'confidence' is not a number\"\n\n    assert \"timestamp\" in data, \"'timestamp' key missing in response\"\n    assert isinstance(data[\"timestamp\"], str), \"'timestamp' is not a string\"\n\n    # Additional sanity checks (timestamps non-empty and confidence score in range 0..1)\n    assert data[\"timestamp\"], \"'timestamp' is empty\"\n    assert 0.0 <= data[\"confidence\"] <= 1.0, \"'confidence' score is out of expected range 0.0 to 1.0\"\n\ntest_get_qos_anomaly_detection_results()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-04T11:34:01.183Z",
    "modified": "2025-10-04T11:34:20.553Z"
  },
  {
    "projectId": "ed0a4a7e-0b9e-49cd-855e-7b47411d66a6",
    "testId": "82a8c397-8a3e-48ea-85c4-3d689507baf9",
    "userId": "e40844a8-c011-70b8-b84a-d40497cb6991",
    "title": "TC007-get real time data for all components",
    "description": "Test the GET /api/v1/real-data endpoint to verify that real-time data for all system components is returned correctly. Validate the presence and accuracy of health, KPIs, federation, and self-evolution data in the response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_get_real_time_data_for_all_components():\n    url = f\"{BASE_URL}/api/v1/real-data\"\n    headers = {\"Accept\": \"application/json\"}\n\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n\n    json_data = response.json()\n\n    # Validate the presence of required top-level keys\n    for key in [\"health\", \"kpis\", \"federation\", \"selfEvolution\"]:\n        assert key in json_data, f\"Missing key '{key}' in response\"\n\n    # Validate types of each component\n    assert isinstance(json_data[\"health\"], dict), \"'health' should be an object\"\n    assert isinstance(json_data[\"kpis\"], dict), \"'kpis' should be an object\"\n    assert isinstance(json_data[\"federation\"], dict), \"'federation' should be an object\"\n    assert isinstance(json_data[\"selfEvolution\"], dict), \"'selfEvolution' should be an object\"\n\n    # Basic sanity checks on content presence\n    # Health object should have at least one key\n    assert len(json_data[\"health\"]) > 0, \"'health' object should not be empty\"\n    # KPIs object should have at least one key\n    assert len(json_data[\"kpis\"]) > 0, \"'kpis' object should not be empty\"\n    # Federation object should have at least one key\n    assert len(json_data[\"federation\"]) > 0, \"'federation' object should not be empty\"\n    # SelfEvolution object should have at least one key\n    assert len(json_data[\"selfEvolution\"]) > 0, \"'selfEvolution' object should not be empty\"\n\ntest_get_real_time_data_for_all_components()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-04T11:34:01.189Z",
    "modified": "2025-10-04T11:34:26.964Z"
  },
  {
    "projectId": "ed0a4a7e-0b9e-49cd-855e-7b47411d66a6",
    "testId": "fc4d168c-448e-49e9-b0a3-e58bfa1b3fd6",
    "userId": "e40844a8-c011-70b8-b84a-d40497cb6991",
    "title": "TC008-system health check",
    "description": "Test the GET /api/v1/health endpoint to verify that the system health status is returned correctly. Validate the status, timestamp, version, and components information in the response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\nHEADERS = {\n    \"Accept\": \"application/json\"\n}\n\ndef test_system_health_check():\n    url = f\"{BASE_URL}/api/v1/health\"\n    try:\n        response = requests.get(url, headers=HEADERS, timeout=TIMEOUT)\n        response.raise_for_status()\n    except requests.RequestException as e:\n        assert False, f\"Request to {url} failed: {e}\"\n\n    data = response.json()\n\n    # Validate required fields in response\n    assert isinstance(data, dict), \"Response is not a JSON object\"\n    assert \"status\" in data, \"Missing 'status' field in response\"\n    assert data[\"status\"] in (\"healthy\", \"degraded\", \"unhealthy\", \"\"), \"'status' field has unexpected value\"\n    assert \"timestamp\" in data, \"Missing 'timestamp' field in response\"\n    assert isinstance(data[\"timestamp\"], str) and data[\"timestamp\"], \"'timestamp' must be a non-empty string\"\n    assert \"version\" in data, \"Missing 'version' field in response\"\n    assert isinstance(data[\"version\"], str) and data[\"version\"], \"'version' must be a non-empty string\"\n    assert \"components\" in data, \"Missing 'components' field in response\"\n    assert isinstance(data[\"components\"], dict), \"'components' field must be an object\"\n\ntest_system_health_check()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-04T11:34:01.195Z",
    "modified": "2025-10-04T11:34:25.487Z"
  },
  {
    "projectId": "ed0a4a7e-0b9e-49cd-855e-7b47411d66a6",
    "testId": "7ea0405a-d482-4ee4-b68c-662660165053",
    "userId": "e40844a8-c011-70b8-b84a-d40497cb6991",
    "title": "TC009-get system metrics",
    "description": "Test the GET /api/v1/metrics endpoint to verify that system metrics are returned correctly. Validate CPU usage, memory usage, network latency, and AI model accuracy in the response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\n\ndef test_get_system_metrics():\n    url = f\"{BASE_URL}/api/v1/metrics\"\n    headers = {\n        \"Accept\": \"application/json\"\n    }\n    try:\n        response = requests.get(url, headers=headers, timeout=TIMEOUT)\n        response.raise_for_status()\n        data = response.json()\n\n        # Validate presence of keys\n        assert \"cpu_usage\" in data, \"cpu_usage key missing in response\"\n        assert \"memory_usage\" in data, \"memory_usage key missing in response\"\n        assert \"network_latency\" in data, \"network_latency key missing in response\"\n        assert \"ai_model_accuracy\" in data, \"ai_model_accuracy key missing in response\"\n\n        # Validate types\n        assert isinstance(data[\"cpu_usage\"], (int, float)), \"cpu_usage is not a number\"\n        assert isinstance(data[\"memory_usage\"], (int, float)), \"memory_usage is not a number\"\n        assert isinstance(data[\"network_latency\"], (int, float)), \"network_latency is not a number\"\n        assert isinstance(data[\"ai_model_accuracy\"], (int, float)), \"ai_model_accuracy is not a number\"\n\n        # Validate values range (optional, generally usage and latency >=0, accuracy 0-1 or 0-100)\n        assert data[\"cpu_usage\"] >= 0, \"cpu_usage is negative\"\n        assert data[\"memory_usage\"] >= 0, \"memory_usage is negative\"\n        assert data[\"network_latency\"] >= 0, \"network_latency is negative\"\n        assert 0 <= data[\"ai_model_accuracy\"] <= 100, \"ai_model_accuracy out of expected range 0-100\"\n\n    except requests.exceptions.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_get_system_metrics()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-04T11:34:01.202Z",
    "modified": "2025-10-04T11:34:28.451Z"
  },
  {
    "projectId": "ed0a4a7e-0b9e-49cd-855e-7b47411d66a6",
    "testId": "b96ab3ea-c3d5-47d1-bc00-9fcf853b96e3",
    "userId": "e40844a8-c011-70b8-b84a-d40497cb6991",
    "title": "TC010-ingest new data",
    "description": "Test the POST /api/v1/data/ingest endpoint to verify that new telecom data can be ingested successfully. Validate that the request accepts data type, data object, and timestamp, and the response confirms successful ingestion.",
    "code": "import requests\nimport uuid\nfrom datetime import datetime, timezone\n\nBASE_URL = \"http://localhost:8000\"\nTIMEOUT = 30\nHEADERS = {\"Content-Type\": \"application/json\"}\n\n\ndef test_ingest_new_data():\n    url = f\"{BASE_URL}/api/v1/data/ingest\"\n    data_type = \"telecom_metric\"\n    data_object = {\n        \"signal_strength\": -70,\n        \"cell_id\": \"Cell_12345\",\n        \"user_count\": 150,\n        \"throughput\": 120.5\n    }\n    timestamp = datetime.now(timezone.utc).isoformat()\n\n    payload = {\n        \"data_type\": data_type,\n        \"data\": data_object,\n        \"timestamp\": timestamp\n    }\n\n    try:\n        response = requests.post(url, headers=HEADERS, json=payload, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected 200 but got {response.status_code}. Response: {response.text}\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\n\ntest_ingest_new_data()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-04T11:34:01.208Z",
    "modified": "2025-10-04T11:34:29.809Z"
  }
]
