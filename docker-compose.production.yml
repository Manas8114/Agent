version: '3.8'

services:
  # Main API Server
  api:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://telecom:telecom@postgres:5432/telecom_ai
      - REDIS_URL=redis://redis:6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      - postgres
      - redis
      - mlflow
    volumes:
      - ./data:/app/data
      - ./models:/app/models
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # AI Agents
  qos-agent:
    build: .
    command: python -m agents.qos_anomaly
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://telecom:telecom@postgres:5432/telecom_ai
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  failure-agent:
    build: .
    command: python -m agents.failure_prediction
    ports:
      - "8002:8002"
    environment:
      - DATABASE_URL=postgresql://telecom:telecom@postgres:5432/telecom_ai
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  traffic-agent:
    build: .
    command: python -m agents.traffic_forecast
    ports:
      - "8003:8003"
    environment:
      - DATABASE_URL=postgresql://telecom:telecom@postgres:5432/telecom_ai
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  energy-agent:
    build: .
    command: python -m agents.energy_optimize
    ports:
      - "8004:8004"
    environment:
      - DATABASE_URL=postgresql://telecom:telecom@postgres:5432/telecom_ai
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  security-agent:
    build: .
    command: python -m agents.security_detection
    ports:
      - "8005:8005"
    environment:
      - DATABASE_URL=postgresql://telecom:telecom@postgres:5432/telecom_ai
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  quality-agent:
    build: .
    command: python -m agents.data_quality
    ports:
      - "8006:8006"
    environment:
      - DATABASE_URL=postgresql://telecom:telecom@postgres:5432/telecom_ai
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 4G
          cpus: '2.0'

  # Dashboard
  dashboard:
    build: ./dashboard/frontend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://api:8000/api/v1
    depends_on:
      - api
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Database
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=telecom_ai
      - POSTGRES_USER=telecom
      - POSTGRES_PASSWORD=telecom
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # MLflow
  mlflow:
    image: python:3.9-slim
    command: >
      sh -c "pip install mlflow psycopg2-binary &&
             mlflow server --backend-store-uri postgresql://telecom:telecom@postgres:5432/telecom_ai
             --default-artifact-root /mlflow/artifacts --host 0.0.0.0"
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=postgresql://telecom:telecom@postgres:5432/telecom_ai
    volumes:
      - mlflow_data:/mlflow
    depends_on:
      - postgres
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus_config.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana_dashboards:/etc/grafana/provisioning/dashboards
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # Alertmanager
  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'

  # AIOps Engine
  aiops:
    build: .
    command: python -m aiops.log_analyzer
    volumes:
      - ./logs:/app/logs
      - ./aiops:/app/aiops
    environment:
      - DATABASE_URL=postgresql://telecom:telecom@postgres:5432/telecom_ai
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Automated Remediation
  remediation:
    build: .
    command: python -m automation.remediation_actions
    environment:
      - DATABASE_URL=postgresql://telecom:telecom@postgres:5432/telecom_ai
      - REDIS_URL=redis://redis:6379
      - API_BASE_URL=http://api:8000/api/v1
    depends_on:
      - api
      - postgres
      - redis
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - api
      - dashboard
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.2'

volumes:
  postgres_data:
  redis_data:
  mlflow_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
